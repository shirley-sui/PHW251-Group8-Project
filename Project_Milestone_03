---
  title: "Project_Milestone_03"
author: "Ngan Nguyen, Nicole Fernandez, Shirley Sui"
format: html
editor: visual
---
  
Project Milestone #3

Clean each dataset and include descriptive statistics for relevant data elements
The sim_flu_CA.csv file and sim_flu_LACounty.csv file together represent simulated morbidity for the entire state of California. While itâ€™s certainly possible for data from different sources to adhere to a format standard, one of the challenges of working with secondary data is that it often does not work out that way. Therefore to prepare each dataset (milestone #3) so that they can be combined into one, whole state, dataset you will need to do the following:

Flu morbidity datasets (from CA and LA County)
Recode column names, values, or formats that are in discordant (dates, etc)
Combine morbidity datasets into a single dataset
Select demographic and geographic strata (s) of interest
Aggregate the data into a new dataframe to  include only one row per strata of interest

Vaccination dataset 
Recode values to be consistent with morbidity datasets so they can be joined
Select vaccination time frame that fits best with morbidity data and subset appropriately
Select demographic strata(s) of interest
Create a vaccination rate metric and summarize to include only one row per strata of interest

```{r load libraries}
# Load tidyverse for all data cleaning packages, including readr()
library(tidyverse)
library(readr)
```

#Loaded dataset from Project Milestone #2

```{r import_data_ca_vax_rates_quarter.csv -- Ngan Nguyen}
#Import the CSV file 'scenario_1/ca_vax_rates_quarter.csv' into a Dataframe in R using read_csv function
ca_vax_rates_quarter <- read_csv("scenario_1/ca_vax_rates_quarter.csv")

#Assign it as "ca_vax_rates_quarter_raw" to distinguish it as raw data
ca_vax_rates_quarter_raw <- ca_vax_rates_quarter
print(ca_vax_rates_quarter_raw)
```

```{r import_data_sim_flu_CA.csv -- Shirley Sui}
# load dataset from group project git repo using read_csv
# assign it as "sim_flu_CA_raw" to distinguish it as raw data
sim_flu_CA_raw <- read_csv('./scenario_1/sim_flu_CA.csv')
print(sim_flu_CA_raw)
```

```{r import_data_sim_flu_LACounty.csv -- Nicole Fernandez}
#Import the CSV file 'scenario_1/sim_flu_LACounty.csv' into a Dataframe in R using read_csv function
sim_flu_LACounty <- read_csv("scenario_1/sim_flu_LACounty.csv")
#Assign it as "sim_flu_LACounty_raw" to distinguish it as raw data
sim_flu_LACounty_raw <- sim_flu_LACounty
print(sim_flu_LACounty_raw)
```

-   Clean up column names (recommend using snake case, which is lower case text with underscores between words)

```{r clean_up_names_ca_vax_rates_quarter.csv -- Ngan Nguyen}
# Get the current column names
current_colnames <- colnames(ca_vax_rates_quarter)

# Convert column names to snake case
new_colnames <- tolower(gsub(" ", "_", current_colnames))

# Assign the new column names to the data frame
colnames(ca_vax_rates_quarter_raw) <- new_colnames

# Print the updated column names
colnames(ca_vax_rates_quarter_raw)
```
```{r clean_up_names_sim_flu_CA.csv -- Shirley Sui}
# rename columns to match the LA County data
# then select only the columns that the LA County dataset has
sim_flu_CA_new <- sim_flu_CA_raw %>%
  mutate(dx_new = new_infections, recovered_new = new_recovered, susceptible = count_susceptible, infected_current = current_infected, infected_cumulative = cumulative_infected, recovered_cumulative = cumulative_recovered, severe_new = new_severe, severe_cumulative = cumulative_severe, age_category = age_cat, race_eth = race_ethnicity, dt_report = report_date, dt_dx = dt_diagnosis) %>%
  select(county, dx_new, recovered_new, susceptible, infected_current, infected_cumulative, recovered_cumulative, severe_new, severe_cumulative, age_category, sex, race_eth, dt_report, dt_dx, pop)
  
# view column names from dataframe to make sure we got what we needed
colnames(sim_flu_CA_new)
```

```{r clean_up_names_sim_flu_LACounty.csv -- Nicole Fernandez}
# change to snake case
colnames(sim_flu_LACounty_raw) <- tolower(gsub(' ', '_', colnames(sim_flu_LACounty_raw)))

# Arrange column names from dataset in specific order as written in code
sim_flu_LACounty_raw <- select(sim_flu_LACounty_raw, c(dx_new, recovered_new, susceptible, infected_current, infected_cumulative, recovered_cumulative, severe_new, severe_cumulative, age_category, sex, race_eth, dt_report, dt_dx))


# View column names from dataframe to make sure they are in the desired order
colnames(sim_flu_LACounty_raw)
```
1) Subset rows or columns, as needed

2) Create new variables needed for analysis (minimum 2)
     New variables should be created based on existing columns; for example
        Calculating a rate
        Combining character strings
        Aggregation

3) Clean variables needed for analysis (minimum 2)
     Examples
        Recode invalid values
        Handle missing data
        Recode categories

4) Data re-structured as needed (aggregated/summarized and/or pivoted)
5) Data dictionary based on clean dataset (minimum 4 data elements), including:
     Variable name
     Data type
     Description
6) One or more tables with descriptive statistics for 4 data elements

7) Html output that is professionally prepared for presentation
     Only the necessary information is outputted (you should suppress, for example, entire data frame outputs)
     Use of headers and sub headers to create an organized document
