---
title: "Project_Milestone_03"
author: "Ngan Nguyen, Nicole Fernandez, Shirley Sui"
format: html
editor: visual
---

## Project Milestone #3:

## Clean each dataset and include descriptive statistics for relevant data elements

-   The sim_flu_CA.csv file and sim_flu_LACounty.csv file together represent simulated morbidity for the entire state of California.

-   While it's certainly possible for data from different sources to adhere to a format standard, one of the challenges of working with secondary data is that it often does not work out that way.

-   Therefore to prepare each dataset (milestone #3) so that they can be combined into one, whole state, dataset you will need to do the following:

```{r load libraries, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 60), tidy = TRUE)

# Load tidyverse for all data cleaning packages
library(tidyverse)
library(lubridate)
library(dplyr)
```

```{r load dataset}
#Load data from project milestone #2 in Milestone_2_Clean_Data
df_vax <- read_csv('./Milestone_2_Clean_Data/ca_vax_rates_quarter_milestone_2.csv')
df_flu_CA <- read_csv('./Milestone_2_Clean_Data/sim_flu_CA_milestone_2.csv')
df_flu_LA <- read_csv('./Milestone_2_Clean_Data/sim_flu_LACounty_milestone_2.csv')
```

### [Flu morbidity datasets (from CA and LA County)]{.underline}

-   Recode column names, values, or formats that are in discordant (dates, etc)

    -   Reviewed all columns in the datasets resulting from last milestone's initial data cleaning

    -   Potentially discordant columns identified via review of codebook:

    -   county (does not exist in LA data)

        -   needs to be added as a column in LA dataframe

    -   age_category

        -   both use the same categories
        -   needs to be set as factor in both dataframes (currently character)

    -   sex

        -   both use the same categories
        -   needs to be set as factor in both dataframes (currently character)

    -   race_eth

        -   in flu_CA - plain text and numbered, needs to be set as factor and recoded
        -   in flu_LA - plain text, needs to be set as factor

    -   dt_report

        -   correct format, but all NA values in flu_LA - can calculate using codebook definition
        -   calculate values in flu_LA - dt_report = last day of epi_week for dt_dx (dt_dx might need to be converted to date format before doing this calculation)

    -   dt_dx

        -   codebook recommends not to use this for flu_CA - can instead use dt_report
        -   remove from both dataframes after dt_report is calculated for flu_LA

```{r cleaning flu_CA - Shirley}
# age_category & sex - format as factor
df_flu_CA_clean <- df_flu_CA %>%
  mutate(age_category = factor(age_category, ordered = is.ordered(age_category)), sex = factor(sex, ordered = is.ordered(sex))) %>%
# recode race_eth and format as factor
  mutate(race_eth = as.factor(case_when(
    race_eth == 1 ~ "White, Non-Hispanic",
    race_eth == 2 ~ "Black, Non-Hispanic", 
    race_eth == 3 ~ "American Indian or Alaska Native, Non-Hispanic", 
    race_eth == 4 ~ "Asian, Non-Hispanic", 
    race_eth == 5 ~ "Native Hawaiian or Pacific Islander, Non-Hispanic", 
    race_eth == 6 ~ "Multiracial (two or more of above races), Non-Hispanic", 
    race_eth == 7 ~ "Hispanic (any race)", 
    race_eth == 9 ~ "Unknown"
  ))) %>%
# Add column for quarter, calculated from dt_report
  mutate(quarter = quarter(dt_report, with_year = TRUE)) %>%
# remove dt_dx from dataframe (not recommended for use for data analysis per codebook for flu_CA). Also remove dt_report, no longer needed.
  select(!c(dt_dx, dt_report))

str(df_flu_CA_clean)
```

```{r cleaning flu_LA -Nicole}

# Assigning new data frame df_flu_LA_clean from existing dataframe df_flu_LA
df_flu_LA_clean <- df_flu_LA

# Add county column in position 1, with value being "Los Angeles County"
df_flu_LA_clean <- data.frame(county = "Los Angeles County", df_flu_LA_clean)

print(df_flu_LA_clean)

# age_category & sex & race_eth - format as factor
df_flu_LA_clean$age_category <- factor(df_flu_LA_clean$age_category)
df_flu_LA_clean$sex <- factor(df_flu_LA_clean$sex)
df_flu_LA_clean$race_eth <- factor(df_flu_LA_clean$race_eth)

str(df_flu_LA_clean)


# create yr_epiweek, calculated from dt_dx

# 1) convert dt_dx to date format
df_flu_LA_clean$dt_dx <- as.Date(df_flu_LA_clean$dt_dx, format = "%d%b%Y")
# 2) add quarter column to dataframe
df_flu_LA_clean$quarter <- quarter(df_flu_LA_clean$dt_dx, with_year = TRUE)


# remove dt_dx from dataframe (not recommended for use for data analysis per codebook for flu_CA). Also remove dt_report
df_flu_LA_clean <- df_flu_LA_clean %>% select(!c(dt_dx,dt_report))

```

-   Combine morbidity datasets into a single dataset

```{r combining flu_CA and flu_LA}
# row bind dataframes for flu simulation together
df_flu_clean <- bind_rows(df_flu_CA_clean, df_flu_LA_clean)

```

-   Select demographic and geographic strata (s) of interest

    -   We're deciding to choose age_category, county, and yr_epiweek as our strata of interest, looking at new diagnoses only

-   Aggregate the data into a new dataframe to include only one row per strata of interest

```{r flu - aggregate data by strata of interest - Nicole & Shirley}

# Group data by the county, age_category, and yr_epiweek & look at new & new severe cases only
df_flu_clean_aggregate <- df_flu_CA_clean %>% group_by(age_category,county,quarter)%>%
  summarise(sum_dx_new = sum(dx_new), sum_severe_new = sum(severe_new), dx_new_rate = sum(dx_new)/sum(susceptible), severe_new_rate = sum(severe_new)/sum(dx_new)) #sum dx_new and severe_new
 

head(df_flu_clean_aggregate)

```

### [Vaccination dataset]{.underline}

-   Recode values to be consistent with morbidity datasets so they can be joined. Reviewed all columns in the datasets resulting from last milestone's initial data cleaning
    -   Aggregate data to manage duplication
    -   county_name
        -   Only has the name of the county, unlike flu_CA country names which has the word "County" included with the country name
    -   county_type
        -   Not necessarily needed to be the same as the other two dataset, currently character
        -   Remove county type from data frame as there is only one value "MIXED"
    -   demographic_category
        -   There are three categories within this column: Age group, Gender, and Race/Ethnicity
        -   Pivot_wide to split the column into three columns
        -   Rename the column Age group to age_category, Gender to sex, and Race/Ethnicity to race_eth to match with the other two data frames
    -   demographic_value
        -   The value is based on the demographic categories:
            -   age_catgory: Under 5, 5 -11, 12 - 17, 18-49, 50-64, 65+
            -   sex: Male, Female, Unknown/unidentified
            -   race_eth: American Indian or Alaska Native, Asian, Black or African American, Latino, Multiracial, Native Hawaiian or Other Pacific Islander, Other Race, Unknown, White
        -   Recode and reclassify the three columns to match with the other two data frames
        -   Will choose "age_category" as a point of strata
    -   estimated_population
    -   dt_admin
        -   Subset the data frame to to 2022 and 2023
    -   total_partial_vaccinated
    -   cumulative_fully_vaccinated
    -   cumulative_at_least_one_dose
    -   cumulative_unvaccinated
    -   suppress_data
    -   cumulative_up_to_date_vax
    -   quarter
        -   Remove quarter from data frame

```{r cleaning ca_vax - Kim Nguyen}

# Aggregating data to manage duplicates before pivoting
aggregated_data <- df_vax %>%
  group_by(county_name, county_type, estimated_population, dt_admin,
           total_partial_vaccinated, cumulative_fully_vaccinated, 
           cumulative_at_least_one_dose,cumulative_unvaccinated, suppress_data, 
           cumulative_up_to_date_vax, quarter, demographic_category 
  ) %>%
  summarise(across(where(is.numeric), sum),  
            across(where(is.character), toString),  
            .groups = "drop")

# Update county_name to include "County" and Pivot the aggregated data
df_ca_vax_clean <- aggregated_data %>%
  mutate(county_name = paste0(county_name, "County")) %>%
  pivot_wider(
    names_from = demographic_category,
    values_from = demographic_value
  )

# Rename the "Race/Ethnicity" column, the "Age Group" column, and the "Gender" column
names(df_ca_vax_clean)[names(df_ca_vax_clean) == "Race/Ethnicity"] <- "race_eth"
names(df_ca_vax_clean)[names(df_ca_vax_clean) == "Age Group"] <- "age_category"
names(df_ca_vax_clean)[names(df_ca_vax_clean) == "Gender"] <- "sex"
names(df_ca_vax_clean)[names(df_ca_vax_clean) == "county_name"] <- "county"

# Recode race_eth and format as factor
df_ca_vax_clean <- df_ca_vax_clean %>%
  mutate(race_eth = as.factor(case_when(
    race_eth == "White" ~ "White, Non-Hispanic",
    race_eth == "Black or African American" ~ "Black, Non-Hispanic", 
    race_eth == "American Indian or Alaska Native" ~ "American Indian or Alaska Native, Non-Hispanic", 
    race_eth == "Asian" ~ "Asian, Non-Hispanic", 
    race_eth == "Native Hawaiian or Other Pacific Islander" ~ "Native Hawaiian or Pacific Islander, Non-Hispanic", 
    race_eth == "Multiracial" ~ "Multiracial (two or more of above races), Non-Hispanic", 
    race_eth == "Latino" ~ "Hispanic (any race)", 
    race_eth == "Other Race" ~ "Other Race, Non-Hispanic", 
    race_eth == "Unknown" ~ "Unknown",  # Add a comma here
    is.na(race_eth) ~ "NA",
    TRUE ~ as.character(race_eth)  # Keep other values unchanged
  )))

# Reclassify age_category to match with sim_flu_CA and sim_flu_LACounty
df_ca_vax_clean <- df_ca_vax_clean %>%
  mutate(age_category = case_when(
    age_category %in% c("Under 5", "12-17", "5-11") ~ "0-17",
    age_category == "18-49" ~ "18-49",
    age_category == "50-64" ~ "50-64",
    age_category == "65+" ~ "65+",
    is.na(age_category) ~ "NA",
    TRUE ~ as.character(age_category)
  ))

# Recode sex to match with sim_flu_CA and sim_flu_LACounty
df_ca_vax_clean <- df_ca_vax_clean %>%
  mutate(sex = case_when(
    sex == "Male" ~ "MALE",
    sex == "Female" ~ "FEMALE",
    sex %in% c("Unknown/unidentified") ~ "NA",
    TRUE ~ as.character(sex)
  ))

#Remove "county_type" and "quarter" columns
df_ca_vax_clean <- df_ca_vax_clean %>%
  select(-quarter, -county_type)

str(df_ca_vax_clean)

```

-   Select vaccination time frame that fits best with morbidity data and subset appropriately

```{r subset vax}
# Convert dt_admin to Date format
df_ca_vax_clean$dt_admin <- as.Date(df_ca_vax_clean$dt_admin, format = "%d/%m/%Y")

# Subsetting the data for the years 2022 and 2023
df_ca_vax_clean <- df_ca_vax_clean %>%
  filter(format(dt_admin, "%Y") %in% c("2022", "2023")) %>%
# Add column for yr_epiweek, calculated from dt_admin
  mutate(quarter = quarter(dt_admin, with_year = TRUE))

print(df_ca_vax_clean)
```

-   Select demographic strata(s) of interest
    -   We choose "age_category" as the demographic data of interest

```{r vax - select demo/geo strata of interest}
df_ca_vax_clean <- df_ca_vax_clean %>%
  filter(age_category != "NA")

print(df_ca_vax_clean)
```

-   Create a vaccination rate metric and summarize to include only one row per strata of interest

```{r vax - vax rate metric, summarize to include one row per strata of interest}

# Fully vaccination rate
df_ca_vax_clean_subset <- df_ca_vax_clean %>%
  mutate(vaccination_rate = cumulative_fully_vaccinated / estimated_population)

# Summarize to include only one row per stratum of interest
df_ca_vax_clean_subset <- df_ca_vax_clean_subset %>%
  group_by(age_category,county,quarter) %>% 
  summarize(
    mean_vaccination_rate = mean(vaccination_rate, na.rm = TRUE),
    .groups = "drop"
  )

print(df_ca_vax_clean_subset)
```

1)  Subset rows or columns, as needed

2)  Create new variables needed for analysis (minimum 2)

    New variables should be created based on existing columns;

    for example

    -   Calculating a rate;

    -   Combining character strings

    -   Aggregation

3)  Clean variables needed for analysis (minimum 2)

    Examples

    -   Recode invalid values

    -   Handle missing data

    -   Recode categories

4)  Data re-structured as needed (aggregated/summarized and/or pivoted)

5)  Data dictionary based on clean dataset (minimum 4 data elements), including:

    -   Variable name
    -   Data type
    -   Description
```{r data dictionary}
data_dictionary <- tibble(
  "Variable" = c("quarter","mean_vaccination_rate","dx_new_rate","severe_new_rate"),
  "Data Type" = c("numeric","numeric","numeric","numeric"),
  "Description" = c("Quarter in which flu case was reported (or, for vaccination data, when vaccinations were completed), in the format of year.quarter","Cumulative fully vaccinated (cumulative_fully_vaccinated) divided by total estimated population (estimated_population)","New flu cases (dx_new) divided by population at risk (susceptible)","New severe flu cases (severe_new) divided by new flu cases (dx_new)")
)

print(data_dictionary)
```

6)  One or more tables with descriptive statistics for 4 data elements

7)  Html output that is professionally prepared for presentation

    -   Only the necessary information is outputted (you should suppress, for example, entire data frame outputs)

    -   Use of headers and sub headers to create an organized document
